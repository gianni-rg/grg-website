@{
    var language = Context.GetPipelineLanguage(); 
    var localizedStrings = Context.GetLocalizedResources(language);
    var supportedLanguages = Context.Settings.Get<string[]>(BlogKeys.Languages);

    // For each supported language, load all translation mapping for pages and blog posts
    var translatedRef = Metadata.String("TranslatedRefs");
    var translatedContentRefs = new Dictionary<string, Dictionary<string, string>>();
    foreach(var lang in supportedLanguages)
    {
        translatedContentRefs[lang] = new Dictionary<string, string>();

        if(!string.IsNullOrEmpty(translatedRef))
        {
            var posts = Context
            .Documents.FromPipeline("BlogPosts_" + lang)
            .Select(x => new KeyValuePair<string, string>(x.Metadata.Get("EditFilePath").ToString(), Context.GetLink(x)))
            .Where(x => !string.IsNullOrEmpty(x.Key));
            translatedContentRefs[lang].AddRange(posts);

            var pages = Context
            .Documents.FromPipeline("Pages_" + lang)
            .Select(x => new KeyValuePair<string, string>(x.Metadata.Get("EditFilePath").ToString(), Context.GetLink(x)))
            .Where(x => !string.IsNullOrEmpty(x.Key));
            translatedContentRefs[lang].AddRange(pages);
        }
        
        var localizedStringsForLang = Context.GetLocalizedResources(lang);
        translatedContentRefs[lang].Add("TagsPath", localizedStringsForLang["TagsPath"]);
        translatedContentRefs[lang].Add("PostsPath", localizedStringsForLang["PostsPath"]);
    }

<div class="language-bar">
<span>@localizedStrings["TranslateTo"]</span>
    @for(int i = 0; i<supportedLanguages.Length; i++)
    {
        var imgLink = "/assets/images/flag_" + supportedLanguages[i] + ".png";
        if(supportedLanguages[i] == language)
        {
            continue;
            // <img src="@imgLink" alt="@supportedLanguages[i]" title="@supportedLanguages[i]" />
        }
        else if(!string.IsNullOrEmpty(translatedRef))
        {
            if(translatedContentRefs[supportedLanguages[i]].ContainsKey(translatedRef))
            {
                <a href="@Context.GetLink(translatedContentRefs[supportedLanguages[i]][translatedRef])"><img src="@imgLink" alt="@supportedLanguages[i]" title="@supportedLanguages[i]" 7></a>
            }
            else
            {
                <a href="@Context.GetLink(supportedLanguages[i] + "/")">@supportedLanguages[i] NOT FOUND</a>
            }
        }
        else
        {
            if(Metadata.String("SourceFileBase") == "_Tag" || Metadata.String("SourceFileBase") == "_Tags")
            {
                <a href="@Context.GetLink(supportedLanguages[i] + "/" + translatedContentRefs[supportedLanguages[i]]["TagsPath"])"><img src="@imgLink" alt="@supportedLanguages[i]" title="@supportedLanguages[i]"/></a>
            }
            else if(Metadata.String("SourceFileBase") == "_Archive")
            {
                string pageRef = Metadata.Get<int>(Keys.CurrentPage) > 1 ? "/" + Metadata.Get<string>(Keys.CurrentPage) : "";
                <a href="@Context.GetLink(supportedLanguages[i] + "/" + translatedContentRefs[supportedLanguages[i]]["PostsPath"] + pageRef)"><img src="@imgLink" alt="@supportedLanguages[i]" title="@supportedLanguages[i]"/></a>
            }
            else
            {
                <a href="@Context.GetLink(supportedLanguages[i] + "/")"><img src="@imgLink" alt="@supportedLanguages[i]" title="@supportedLanguages[i]"/></a>
            }
        }
    }
</div>
}