@{  
    var language = Context.GetPipelineLanguage(); 
    var localizedStrings = Context.GetLocalizedResources(language);
    
    List<Tuple<string, string>> pages = Context
        .Documents.FromPipeline("Pages_" + language)
        .Where(x => x.Bool(BlogKeys.ShowInNavbar, true))
        .Where(x => x.FilePath(Keys.RelativeFilePath)?.FullPath?.StartsWith("index") == (bool?)false)
        .Select(x => Tuple.Create(x.WithoutSettings.String(Keys.Title), Context.GetLink(x)))
        .Where(x => !string.IsNullOrEmpty(x.Item1))
        .OrderBy(x => x.Item1)
        .ToList();

    var searchPage = Documents.FromPipeline("Pages_" + language)
                        .Where(x => x.FilePath(Keys.RelativeFilePath)?.FullPath?.Contains("search") == (bool?)true)
                        .Select(x => Tuple.Create(x.WithoutSettings.String(Keys.Title), Context.GetLink(x)))
                        .Where(x => !string.IsNullOrEmpty(x.Item1)).FirstOrDefault();

    if(Documents.FromPipeline("Tags_" + language).Any())
    {
        pages.Insert(0, Tuple.Create(localizedStrings["Tags"], Context.GetLink(language + "/" + localizedStrings[BlogKeys.TagsPath])));
    }
    if(Documents.FromPipeline("BlogPosts_" + language).Any() && Context.Bool(BlogKeys.GenerateArchive))
    {
        pages.Insert(0, Tuple.Create(localizedStrings["Archive"], Context.GetLink(language + "/" + localizedStrings[BlogKeys.PostsPath])));
    }
    if(searchPage != null)
    {
        pages.Insert(0, searchPage);
    }
    foreach(Tuple<string, string> page in pages)
    {
        <li><a href="@page.Item2">@page.Item1</a></li>
    }
}